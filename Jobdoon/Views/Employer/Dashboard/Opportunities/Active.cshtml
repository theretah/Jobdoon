@inject Microsoft.AspNetCore.Identity.UserManager<Jobdoon.Models.Entities.AppUser> userManager
@using Jobdoon.Utilities;
@inject Jobdoon.DataAccess.UnitOfWork.IUnitOfWork unit
@{
    var user = userManager.GetUserAsync(User).Result;
    var opportunities = unit.Opportunities.Find(o => (o.CompanyId == user.CompanyId) && (o.IsClosed == false)).ToList();
}
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a asp-controller="Employer" asp-action="Opportunities" class="nav-link">همه آگهی ها</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="#">آگهی های فعال</a>
                </li>
                <li class="nav-item">
                    <a asp-controller="Employer" asp-action="ClosedOpportunities" class="nav-link">آگهی های بسته شده</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container mt-5">
    <div class="row">
        @foreach (var o in opportunities)
        {
            @await Component.InvokeAsync("EmployerOpportunity", new { opportunity = o })
        }
    </div>
</div>